#Define pipeline stages
stages:
    - install
    - build
    - test
    - deploy

#Install Dependencies
install-dependencies:
    stage: install
    image: node:20
    script:
        - echo "Installing backend dependencies..."
        - cd WagInn-Backend && npm install
        - echo "Installing frontend dependencies..."
        - cd ../WagInn-Project && npm install
    cache:
        paths:
        - WagInn_Backend/node_modules/
        - WagInn_Project/node_modules/

# Build frontend
build-frontend:
  stage: build
  image: node:20
  script:
    - cd WagInn-Project
    # Clean install to ensure consistent state
    - rm -rf node_modules package-lock.json
    - npm install #install Angular CLI locally too
    # Create environment files from GitLab variables
    - mkdir -p src/environments
    - |
      cat > src/environments/environment.ts << 'EOF'
      export const environment = {
        production: false,
        apiUrlHostRegister: '$API_URL_HOST_REGISTER',
        apiUrlHostSignIn: '$API_URL_HOST_SIGNIN',
        apiUrlUserRegister: '$API_URL_USER_REGISTER',
        apiUrlUserSignIn: '$API_URL_USER_SIGNIN',
        apiUrlFetchProperty: '$API_URL_FETCH_PROPERTY',
        apiUrlCreateBooking: '$API_URL_CREATE_BOOKING',
        apiUrlGetUserBookings: '$API_URL_GET_USER_BOOKINGS',
        apiUrlGetHostBookings: '$API_URL_GET_HOST_BOOKINGS',
        apiUrlGetBookingByConfirmation: '$API_URL_GET_BOOKING_BY_CONFIRMATION',
        apiUrlCancelBooking: '$API_URL_CANCEL_BOOKING',
        apiUrlGetBookingDetails: '$API_URL_GET_BOOKING_DETAILS',
        apiUrlCheckAvailability: '$API_URL_CHECK_AVAILABILITY',
      };
      EOF
    - |
      cat > src/environments/environment.prod.ts << 'EOF'
      export const environment = {
        production: true,
        apiUrlHostRegister: '$API_URL_HOST_REGISTER',
        apiUrlHostSignIn: '$API_URL_HOST_SIGNIN',
        apiUrlUserRegister: '$API_URL_USER_REGISTER',
        apiUrlUserSignIn: '$API_URL_USER_SIGNIN',
        apiUrlFetchProperty: '$API_URL_FETCH_PROPERTY',
        apiUrlCreateBooking: '$API_URL_CREATE_BOOKING',
        apiUrlGetUserBookings: '$API_URL_GET_USER_BOOKINGS',
        apiUrlGetHostBookings: '$API_URL_GET_HOST_BOOKINGS',
        apiUrlGetBookingByConfirmation: '$API_URL_GET_BOOKING_BY_CONFIRMATION',
        apiUrlCancelBooking: '$API_URL_CANCEL_BOOKING',
        apiUrlGetBookingDetails: '$API_URL_GET_BOOKING_DETAILS',
        apiUrlCheckAvailability: '$API_URL_CHECK_AVAILABILITY',
      };
      EOF
    # Replace placeholders with actual GitLab variables
    - sed -i "s|\$API_URL_HOST_REGISTER|$API_URL_HOST_REGISTER|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_HOST_SIGNIN|$API_URL_HOST_SIGNIN|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_USER_REGISTER|$API_URL_USER_REGISTER|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_USER_SIGNIN|$API_URL_USER_SIGNIN|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_FETCH_PROPERTY|$API_URL_FETCH_PROPERTY|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_CREATE_BOOKING|$API_URL_CREATE_BOOKING|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_GET_USER_BOOKINGS|$API_URL_GET_USER_BOOKINGS|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_GET_HOST_BOOKINGS|$API_URL_GET_HOST_BOOKINGS|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_GET_BOOKING_BY_CONFIRMATION|$API_URL_GET_BOOKING_BY_CONFIRMATION|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_CANCEL_BOOKING|$API_URL_CANCEL_BOOKING|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_GET_BOOKING_DETAILS|$API_URL_GET_BOOKING_DETAILS|g" src/environments/environment.ts
    - sed -i "s|\$API_URL_CHECK_AVAILABILITY|$API_URL_CHECK_AVAILABILITY|g" src/environments/environment.ts
    # Do the same for production environment
    - sed -i "s|\$API_URL_HOST_REGISTER|$API_URL_HOST_REGISTER|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_HOST_SIGNIN|$API_URL_HOST_SIGNIN|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_USER_REGISTER|$API_URL_USER_REGISTER|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_USER_SIGNIN|$API_URL_USER_SIGNIN|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_FETCH_PROPERTY|$API_URL_FETCH_PROPERTY|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_CREATE_BOOKING|$API_URL_CREATE_BOOKING|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_GET_USER_BOOKINGS|$API_URL_GET_USER_BOOKINGS|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_GET_HOST_BOOKINGS|$API_URL_GET_HOST_BOOKINGS|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_GET_BOOKING_BY_CONFIRMATION|$API_URL_GET_BOOKING_BY_CONFIRMATION|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_CANCEL_BOOKING|$API_URL_CANCEL_BOOKING|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_GET_BOOKING_DETAILS|$API_URL_GET_BOOKING_DETAILS|g" src/environments/environment.prod.ts
    - sed -i "s|\$API_URL_CHECK_AVAILABILITY|$API_URL_CHECK_AVAILABILITY|g" src/environments/environment.prod.ts
    # Verify environment files exist
     # Verify environment files exist
    - test -f src/environments/environment.ts || (echo "Environment file missing!" && exit 1)
    - test -f src/environments/environment.prod.ts || (echo "Production environment file missing!" && exit 1)
     # Build with verbose output for debugging
    - npx ng build --verbose
  artifacts:
    paths:
      - WagInn-Project/dist/

# Test backend (runs in parallel with frontend tests)
test-backend:
  stage: test
  image: node:20
  script:
    # - cd WagInn-Backend
    # - npm install
    # - npm test || echo "No backend tests found"
    - echo "Backend tests skipped - no tests configured"

# Test frontend (runs in parallel with backend tests)
test-frontend:
  stage: test
  image: node:20
  script:
    # - cd WagInn-Project
    # - npm install
    # - npm test || echo "No frontend tests found"
    - echo "Frontend tests skipped - no tests configured"

# Deploy to Netlify (only on main branch)
deploy-to-netlify:
  stage: deploy
  image: node:20
  script:
    - echo "=== NETLIFY DEPLOYMENT START ==="
    - apt-get update && apt-get install -y zip curl
    - cd WagInn-Project
    - echo "1. Build output structure:"
    - find dist/ -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10
    - cd dist/WagInn-Project/browser
    - echo "2. Files in browser directory:"
    - ls -la
    - echo "3. Index.html content (first 5 lines):"
    - head -5 index.html
    - echo "4. Creating _redirects file:"
    - echo "/*    /index.html   200" > _redirects
    - cat _redirects
    - echo "5. Files being zipped:"
    - ls -la
    - zip -r ../../../site.zip .
    - cd ../../..
    - echo "6. Zip file info:"
    - ls -lh site.zip
    - unzip -l site.zip | head -15
    - echo "7. Checking variables:"
    - echo "Auth token set:" $(if [ -n "$NETLIFY_AUTH_TOKEN" ]; then echo "YES"; else echo "NO"; fi)
    - echo "Site ID set:" $(if [ -n "$NETLIFY_SITE_ID" ]; then echo "YES"; else echo "NO"; fi)
    - echo "8. DEPLOYING TO NETLIFY..."
    - |
      curl -s -w "HTTPSTATUS:%{http_code}" \
        -X POST \
        -H "Authorization: Bearer $NETLIFY_AUTH_TOKEN" \
        -H "Content-Type: application/zip" \
        --data-binary @site.zip \
        "https://api.netlify.com/api/v1/sites/$NETLIFY_SITE_ID/deploys" > deploy_response.txt
    - echo "Deploy response saved to file"
    - cat deploy_response.txt
    - STATUS=$(grep -E "HTTPSTATUS:[0-9]+" deploy_response.txt | sed 's/.*HTTPSTATUS://')
    - echo "HTTP Status:" $STATUS
    - |
      if [ "$STATUS" = "200" ] || [ "$STATUS" = "201" ]; then
        echo "✅ DEPLOYMENT SUCCESS"
      else
        echo "❌ DEPLOYMENT FAILED"
        cat deploy_response.txt
        exit 1
      fi
    - echo "9. DEPLOYMENT COMPLETE!"
    - echo "Site URL:" https://$NETLIFY_SITE_ID.netlify.app/
  only:
    - master